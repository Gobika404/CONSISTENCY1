2/7
power problem
average in c
vowel
two decimal precision

3/7ðŸ˜Š
1. strictly consecutive sequence 
input:5
      3 2 1 4 5
output:
      
     2
code: J
import java.util.*;
class Main {
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int count=0;
        HashMap<Integer,Integer> al = new HashMap<>();
        for(int i=0;i<n;i++)
        {
            int k = sc.nextInt();
            int tar=k-1;
            if(al.containsKey(tar))
            {
                count++;
            }
            al.put(k,i);
           
        }
        System.out.print(count);
    }
}

2. TWO SUM PROBLEM:
nums = [2, 7, 11, 15]
target = 9

 BETTER SOLUTION:
string read(int n, vector<int> book, int target) {
    map<int, int> mpp;
    for(int i = 0; i < n; i++) {
        int a = book[i];
        int more = target - a;
        if(mpp.find(more) != mpp.end()) {
            return "YES";
        }
        mpp[a] = 1;
    }
    return "NO";
}

OPTIMAL :
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

string read(int n, vector<int> book, int target) {
    int left = 0, right = n - 1;

    // Sort the array first
    sort(book.begin(), book.end());

    while (left < right) {
        int sum = book[left] + book[right];

        if (sum == target) {
            return "YES"; // Found a pair
        } else if (sum < target) {
            left++; // Move left pointer to the right
        } else {
            right--; // Move right pointer to the left
        }
    }

    return "NO"; // No pair found
}

3.ROLL DIE PATTERN:

#include <iostream>
using namespace std;

// Function to print die face
void roll(int n) {
    // Step 1: Initialize 3x3 dot grid
    char dice[3][3] = {
        {'.', '.', '.'},
        {'.', '.', '.'},
        {'.', '.', '.'}
    };

    // Step 2: Apply die face logic (modify dot positions)
    if (n == 1 || n == 3 || n == 5)
        dice[1][1] = '*'; // center dot

    if (n >= 2)
        dice[0][0] = dice[2][2] = '*'; // top-left & bottom-right

    if (n >= 3)
        dice[0][2] = dice[2][0] = '*'; // top-right & bottom-left

    if (n == 6)
        dice[0][1] = dice[2][1] = '*'; // middle-left & middle-right

    // Step 3: Print the grid
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++)
            cout << dice[i][j] << " ";
        cout << endl;
    }

    cout << endl; // add spacing between dice
}

int main() {
    string str;
    cout << "Enter a string of die faces (e.g. 1): ";
    cin >> str;

    cout << "\nDie Patterns:\n";
    for (char ch : str) {
        int num = ch - '0'; // convert char to int
        roll(num);
    }

    return 0;
}
